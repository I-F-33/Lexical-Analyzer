<program> → basic main() <block>
<block> → { <decls_stmts> }
<decls_stmts> → <decl> <decls_stmts> 
              | <stmt> <decls_stmts> 
              | ε
<decl> → <type> id <array_decl> <init> ;
<array_decl> → [ <expr> ] 
             | ε
<init> → = <initializer> 
       | ε

<initializer> → { <expr_list> } 
              | <expr>
<expr_list> → <expr> <expr_list_prime>

<expr_list_prime> → , <expr> <expr_list_prime> 
                  | ε

<type> → num <type_prime> 
       | real <type_prime> 
       | basic <type_prime>

<type_prime> → [ num ] <type_prime> 
             | ε

<stmt> → <if_stmt> 
       | while ( <bool> ) <stmt> 
       | for ( <for_init> ; <bool> ; <for_update> ) <stmt> 
       | do <stmt> while ( <bool> ) ; 
       | break ; 
       | continue ; 
       | return num ; 
       | <block> 
       | <loc> = <bool> ;

<if_stmt> → if ( <bool> ) <matched_stmt> 
          | if ( <bool> ) <unmatched_stmt>

<matched_stmt> → <stmt> else <stmt>

<unmatched_stmt> → <stmt>

<for_init> → <decl> 
           | <loc> = <expr> 
           | ε

<for_update> → <loc> = <expr> 
             | <unary> 
             | ε

<loc> → id <loc_prime>

<loc_prime> → [ <bool> ] <loc_prime> 
            | ε

<bool> → <join> <bool_prime>

<bool_prime> → || <join> <bool_prime> 
             | ε

<join> → <equality> <join_prime>

<join_prime> → && <equality> <join_prime> 
             | ε

<equality> → <rel> <equality_prime>

<equality_prime> → == <rel> <equality_prime> 
                 | != <rel> <equality_prime> 
                 | ε

<rel> → <expr> <rel_prime>

<rel_prime> → < <expr> 
            | <= <expr> 
            | >= <expr> 
            | > <expr> 
            | % <expr> 
            | ε

<expr> → <term> <expr_prime>

<expr_prime> → + <term> <expr_prime> 
             | - <term> <expr_prime> 
             | ε

<term> → <unary> <term_prime>

<term_prime> → * <unary> <term_prime> 
             | / <unary> <term_prime> 
             | ε

<unary> → ! <unary> 
        | - <unary> 
        | <factor>

<factor> → ( <bool> ) 
         | <loc> 
         | num 
         | real 
         | true 
         | false

First Sets

	•	First(program) = { basic }
	•	First(block) = { { }
	•	First(decls_stmts) = { basic, num, real, if, while, for, do, break, continue, return, {, id, ε }
	•	First(decl) = { basic, num, real }
	•	First(array_decl) = { [, ε }
	•	First(init) = { =, ε }
	•	First(initializer) = { {, num, real, true, false, (, id }
	•	First(expr_list) = { num, real, true, false, (, id }
	•	First(expr_list_prime) = { ,, ε }
	•	First(type) = { num, real, basic }
	•	First(type_prime) = { [, ε }
	•	First(stmt) = { if, while, for, do, break, continue, return, {, id }
	•	First(if_stmt) = { if }
	•	First(matched_stmt) = { if, while, for, do, break, continue, return, {, id }
	•	First(unmatched_stmt) = { if, while, for, do, break, continue, return, {, id }
	•	First(for_init) = { basic, num, real, id, ε }
	•	First(for_update) = { id, !, -, ε }
	•	First(loc) = { id }
	•	First(loc_prime) = { [, ε }
	•	First(bool) = { num, real, true, false, (, id, !, - }
	•	First(bool_prime) = { ||, ε }
	•	First(join) = { num, real, true, false, (, id, !, - }
	•	First(join_prime) = { &&, ε }
	•	First(equality) = { num, real, true, false, (, id, !, - }
	•	First(equality_prime) = { ==, !=, ε }
	•	First(rel) = { num, real, true, false, (, id, !, - }
	•	First(rel_prime) = { <, <=, >=, >, %, ε }
	•	First(expr) = { num, real, true, false, (, id, !, - }
	•	First(expr_prime) = { +, -, ε }
	•	First(term) = { num, real, true, false, (, id, !, - }
	•	First(term_prime) = { *, /, ε }
	•	First(unary) = { !, -, num, real, true, false, (, id }
	•	First(factor) = { (, id, num, real, true, false }

Follow Sets

	•	Follow(program) = { $ }
	•	Follow(block) = { $, else, while, return, break, continue, if, for, }, ;, {, id }
	•	Follow(decls_stmts) = { } }
	•	Follow(decl) = { basic, num, real, if, while, for, do, break, continue, return, {, id, } }
	•	Follow(array_decl) = { =, ; }
	•	Follow(init) = { ; }
	•	Follow(initializer) = { ;, } }
	•	Follow(expr_list) = { } }
	•	Follow(expr_list_prime) = { } }
	•	Follow(type) = { id }
	•	Follow(type_prime) = { id }
	•	Follow(stmt) = { else, }, while, return, break, continue, if, for, do, {, ;, id }
	•	Follow(if_stmt) = { else, }, while, return, break, continue, if, for, do, {, ;, id }
	•	Follow(matched_stmt) = { else, }, while, return, break, continue, if, for, do, {, ;, id }
	•	Follow(unmatched_stmt) = { else, }, while, return, break, continue, if, for, do, {, ;, id }
	•	Follow(for_init) = { ; }
	•	Follow(for_update) = { ) }
	•	Follow(loc) = { ;, =, ], ++, --, +, -, *, /, &&, ||, <, <=, >=, >, ==, !=, %, ) }
	•	Follow(loc_prime) = { =, ;, ], ++, --, +, -, *, /, &&, ||, <, <=, >=, >, ==, !=, %, ) }
	•	Follow(bool) = { ;, ], ), } }
	•	Follow(bool_prime) = { ;, ], ), } }
	•	Follow(join) = { ||, ;, ], ), } }
	•	Follow(join_prime) = { ;, ], ), } }
	•	Follow(equality) = { &&, ||, ;, ], ), } }
	•	Follow(equality_prime) = { &&, ||, ;, ], ), } }
	•	Follow(rel) = { ==, !=, &&, ||, ;, ], ), } }
	•	Follow(rel_prime) = { ==, !=, &&, ||, ;, ], ), } }
	•	Follow(expr) = { <, <=, >=, >, %, ==, !=, &&, ||, ;, ], ), } }
	•	Follow(expr_prime) = { <, <=, >=, >, %, ==, !=, &&, ||, ;, ], ), } }
	•	Follow(term) = { +, -, <, <=, >=, >, %, ==, !=, &&, ||, ;, ], ), } }
	•	Follow(term_prime) = { +, -, <, <=, >=, >, %, ==, !=, &&, ||, ;, ], ), } }
	•	Follow(unary) = { *, /, +, -, <, <=, >=, >, %, ==, !=, &&, ||, ;, ], ), } }
	•	Follow(factor) = { *, /, +, -, <, <=, >=, >, %, ==, !=, &&, ||, ;, ], ), } }

Grammar:

<program>         → basic main() <block>

<block>           → { <decls_stmts> }

<decls_stmts>     → <decl> <decls_stmts> 
                  | <stmt> <decls_stmts> 
                  | ε

<decl>            → <type> id <array_decl> <init> ;

<array_decl>      → [ <expr> ] 
                  | ε

<init>            → = <initializer> 
                  | ε

<initializer>     → { <expr_list> } 
                  | <expr>

<expr_list>       → <expr> <expr_list_prime>

<expr_list_prime> → , <expr> <expr_list_prime> 
                  | ε

<type>            → num <type_prime> 
                  | real <type_prime> 
                  | basic <type_prime>

<type_prime>      → [ num ] <type_prime> 
                  | ε

<stmt>            → <if_stmt> 
                  | while ( <bool> ) <stmt> 
                  | for ( <for_init> ; <bool> ; <for_update> ) <stmt> 
                  | do <stmt> while ( <bool> ) ; 
                  | break ; 
                  | continue ; 
                  | return num ; 
                  | <block> 
                  | <loc> = <bool> ;

<if_stmt>         → if ( <bool> ) <matched_stmt> 
                  | if ( <bool> ) <unmatched_stmt>

<matched_stmt>    → <stmt> else <stmt>

<unmatched_stmt>  → <stmt>

<for_init>        → <decl> 
                  | <loc> = <expr> 
                  | ε

<for_update>      → <loc> = <expr> 
                  | <increment> 
                  | <decrement> 
                  | ε

<loc>             → id <loc_prime>

<loc_prime>       → [ <bool> ] <loc_prime> 
                  | ε

<bool>            → <join> <bool_prime>

<bool_prime>      → || <join> <bool_prime> 
                  | ε

<join>            → <equality> <join_prime>

<join_prime>      → && <equality> <join_prime> 
                  | ε

<equality>        → <rel> <equality_prime>

<equality_prime>  → == <rel> <equality_prime> 
                  | != <rel> <equality_prime> 
                  | ε

<rel>             → <expr> <rel_prime>

<rel_prime>       → < <expr> 
                  | <= <expr> 
                  | >= <expr> 
                  | > <expr> 
                  | ε

<expr>            → <term> <expr_prime>

<expr_prime>      → + <term> <expr_prime> 
                  | - <term> <expr_prime> 
                  | ε

<term>            → <unary> <term_prime>

<term_prime>      → * <unary> <term_prime> 
                  | / <unary> <term_prime> 
                  | ε

<unary>           → ! <unary> 
                  | - <unary> 
                  | <factor> 
                  | <increment> 
                  | <decrement>

<factor>          → ( <bool> ) 
                  | <loc> 
                  | num 
                  | real 
                  | true 
                  | false

<increment>       → <loc> ++ 
                  | ++ <loc>

<decrement>       → <loc> -- 
                  | -- <loc>


FIRST sets:

FIRST(program) = {basic}
FIRST(block) = {{}
FIRST(decls_stmts) = {num, id, real, for, break, basic, if, continue, do, ε, {, return, while}
FIRST(decl) = {real, num, basic}
FIRST(array_decl) = {[, ε}
FIRST(init) = {=, ε}
FIRST(initializer) = {++, num, (, true, !, id, real, false, -, {, --}
FIRST(expr_list) = {++, num, (, true, !, id, real, false, -, --}
FIRST(expr_list_prime) = {,, ε}
FIRST(type) = {real, num, basic}
FIRST(type_prime) = {[, ε}
FIRST(stmt) = {id, break, if, continue, do, for, {, return, while}
FIRST(if_stmt) = {if}
FIRST(matched_stmt) = {id, break, if, continue, do, for, {, return, while}
FIRST(unmatched_stmt) = {id, break, if, continue, do, for, {, return, while}
FIRST(for_init) = {num, id, ε, real, basic}
FIRST(for_update) = {++, --, id, ε}
FIRST(loc) = {id}
FIRST(loc_prime) = {[, ε}
FIRST(bool) = {++, num, (, true, !, id, real, false, -, --}
FIRST(bool_prime) = {||, ε}
FIRST(join) = {++, num, (, true, !, id, real, false, -, --}
FIRST(join_prime) = {&&, ε}
FIRST(equality) = {++, num, (, true, !, id, real, false, -, --}
FIRST(equality_prime) = {==, ε, !=}
FIRST(rel) = {++, num, (, true, !, id, real, false, -, --}
FIRST(rel_prime) = {>=, <, >, ε, <=}
FIRST(expr) = {++, num, (, true, !, id, real, false, -, --}
FIRST(expr_prime) = {+, -, ε}
FIRST(term) = {++, num, (, true, !, id, real, false, -, --}
FIRST(term_prime) = {*, /, ε}
FIRST(unary) = {num, ++, (, true, !, id, real, false, -, --}
FIRST(factor) = {num, (, true, id, real, false}
FIRST(increment) = {++, id}
FIRST(decrement) = {--, id}

FOLLOW sets:

FOLLOW(program) = {$}
FOLLOW(block) = {}, num, $, id, real, else, break, basic, if, continue, do, ε, for, {, return, while}
FOLLOW(decls_stmts) = {}}
FOLLOW(decl) = {}, num, id, real, for, break, basic, if, continue, ;, do, ε, {, return, while}
FOLLOW(array_decl) = {}, num, id, real, for, break, basic, if, continue, ;, return, do, ε, {, =, while}
FOLLOW(init) = {;}
FOLLOW(initializer) = {;}
FOLLOW(expr_list) = {}}
FOLLOW(expr_list_prime) = {}}
FOLLOW(type) = {id}
FOLLOW(type_prime) = {id}
FOLLOW(stmt) = {}, num, id, real, for, else, break, basic, if, continue, do, ε, {, return, while}
FOLLOW(if_stmt) = {}, num, id, real, for, else, break, basic, if, continue, do, ε, {, return, while}
FOLLOW(matched_stmt) = {}, num, id, real, for, else, break, basic, if, continue, do, ε, {, return, while}
FOLLOW(unmatched_stmt) = {}, num, id, real, for, else, break, basic, if, continue, do, ε, {, return, while}
FOLLOW(for_init) = {;}
FOLLOW(for_update) = {)}
FOLLOW(loc) = {}, ++, ], !=, ;, <, *, /, ,, -, >, ε, =, <=, --, ), ==, >=, ||, +, &&}
FOLLOW(loc_prime) = {}, ++, ], !=, ;, <, *, /, ,, -, >, ε, =, <=, ), ==, >=, ||, &&, +, --}
FOLLOW(bool) = {], ), ;}
FOLLOW(bool_prime) = {], ;, )}
FOLLOW(join) = {], ), ε, ||, ;}
FOLLOW(join_prime) = {], ), ε, ||, ;}
FOLLOW(equality) = {], ), ε, &&, ||, ;}
FOLLOW(equality_prime) = {], ), ε, &&, ||, ;}
FOLLOW(rel) = {], ), !=, ==, ||, ;, ε, &&}
FOLLOW(rel_prime) = {], ), !=, ==, ||, ;, ε, &&}
FOLLOW(expr) = {}, ], ), !=, ==, >=, ||, ;, <, ,, >, ε, &&, <=}
FOLLOW(expr_prime) = {}, ], ), !=, ==, >=, ||, ;, <, ,, >, ε, &&, <=}
FOLLOW(term) = {}, ], !=, ;, <, ,, -, >, ε, <=, ), ==, >=, ||, +, &&}
FOLLOW(term_prime) = {}, ], !=, ;, <, ,, -, >, ε, <=, ), ==, >=, ||, +, &&}
FOLLOW(unary) = {}, ], !=, ;, <, *, /, ,, -, >, ε, <=, ), ==, >=, ||, +, &&}
FOLLOW(factor) = {}, ], !=, ;, <, *, /, ,, -, >, ε, <=, ), ==, >=, ||, +, &&}
FOLLOW(increment) = {}, ], !=, ;, <, *, /, ,, -, >, ε, <=, ), ==, >=, ||, +, &&}
FOLLOW(decrement) = {}, ], !=, ;, <, *, /, ,, -, >, ε, <=, ), ==, >=, ||, +, &&}
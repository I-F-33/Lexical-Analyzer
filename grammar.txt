Program -> basic main ( ) Block
Block -> { Block''
Decls -> Decl Decls'
Decl -> Type id ;
Type -> basic Type'
Stmts -> Stmt Stmts'
Stmt -> if ( Bool ) Stmt Stmt'
Stmt -> Loc = Bool ;
Stmt -> while ( Bool ) Stmt
Stmt -> do Stmt while ( Bool ) ;
Stmt -> return num ;
Stmt -> break ;
Stmt -> { Block''
Loc -> id Loc'
Bool -> Join Bool'
Join -> Equality Join'
Equality -> Rel Equality''
Rel -> Expr Rel'
Expr -> Term Expr''
Term -> Unary Term''
Unary -> ! Unary
Unary -> - Unary
Unary -> Factor
Factor -> ( Bool )
Factor -> id Loc'
Factor -> num
Factor -> real
Factor -> true
Factor -> false
Block' -> if ( Bool ) Stmt Stmt' Stmts' }
Block' -> id Loc' = Bool ; Stmts' }
Block' -> while ( Bool ) Stmt Stmts' }
Block' -> do Stmt while ( Bool ) ; Stmts' }
Block' -> return num ; Stmts' }
Block' -> break ; Stmts' }
Block' -> { Block'' Stmts' }
Block' -> }
Block'' -> basic Type' id ; Decls' Block'
Block'' -> if ( Bool ) Stmt Stmt' Stmts' }
Block'' -> id Loc' = Bool ; Stmts' }
Block'' -> while ( Bool ) Stmt Stmts' }
Block'' -> do Stmt while ( Bool ) ; Stmts' }
Block'' -> return num ; Stmts' }
Block'' -> break ; Stmts' }
Block'' -> { Block'' Stmts' }
Block'' -> }
Stmts' -> if ( Bool ) Stmt Stmt' Stmts'
Stmts' -> id Loc' = Bool ; Stmts'
Stmts' -> while ( Bool ) Stmt Stmts'
Stmts' -> do Stmt while ( Bool ) ; Stmts'
Stmts' -> return num ; Stmts'
Stmts' -> break ; Stmts'
Stmts' -> { Block'' Stmts'
Stmts' -> ε
Stmt' -> ε
Stmt' -> else Stmt
Equality' -> == Rel
Equality' -> != Rel
Rel' -> < Expr
Rel' -> <= Expr
Rel' -> >= Expr
Rel' -> > Expr
Rel' -> ε
Expr' -> + Term
Expr' -> - Term
Term' -> / Unary
Term' -> * Unary
Decls' -> Decl Decls'
Decls' -> ε
Type' -> [ num ] Type'
Type' -> ε
Loc' -> [ Bool ] Loc'
Loc' -> ε
Bool' -> || Join Bool'
Bool' -> ε
Join' -> && Equality Join'
Join' -> ε
Equality'' -> Equality' Equality''
Equality'' -> ε
Expr'' -> Expr' Expr''
Expr'' -> ε
Term'' -> Term' Term''
Term'' -> ε

FIRST SET 
==========
Program : basic
Block : {
Decls : basic
Decl : basic
Type : basic
Stmts : if,while,do,return,break,{,id
Stmt : if,while,do,return,break,{,id
Loc : id
Bool : !,-,(,id,num,real,true,false
Join : !,-,(,id,num,real,true,false
Equality : !,-,(,id,num,real,true,false
Rel : !,-,(,id,num,real,true,false
Expr : !,-,(,id,num,real,true,false
Term : !,-,(,id,num,real,true,false
Unary : !,-,(,id,num,real,true,false
Factor : (,id,num,real,true,false
Block' : if,id,while,do,return,break,{,}
Block'' : basic,if,id,while,do,return,break,{,}
Stmts' : if,id,while,do,return,break,{,ε
Stmt' : ε,else
Equality' : ==,!=
Rel' : <,<=,>=,>,ε
Expr' : +,-
Term' : /,*
Decls' : ε,basic
Type' : [,ε
Loc' : [,ε
Bool' : ||,ε
Join' : &&,ε
Equality'' : ε,==,!=
Expr'' : ε,+,-
Term'' : ε,/,*


FOLLOW SET
===========
Program : $
Block : $
Decls :
Decl : basic,if,id,while,do,return,break,{,}
Type : id
Stmts :
Stmt : if,id,while,do,return,break,{,else,}
Loc : =
Bool : ),;,]
Join : ||,),;,]
Equality : &&,||,),;,]
Rel : ==,!=,&&,||,),;,]
Expr : <,<=,>=,>,==,!=,&&,||,),;,]
Term : +,-,<,<=,>=,>,==,!=,&&,||,),;,]
Unary : /,*,+,-,<,<=,>=,>,==,!=,&&,||,),;,]
Factor : /,*,+,-,<,<=,>=,>,==,!=,&&,||,),;,]
Block' : $,if,id,while,do,return,break,{,else,}
Block'' : $,if,id,while,do,return,break,{,else,}
Stmts' : }
Stmt' : if,id,while,do,return,break,{,else,}
Equality' : ==,!=,&&,||,),;,]
Rel' : ==,!=,&&,||,),;,]
Expr' : +,-,<,<=,>=,>,==,!=,&&,||,),;,]
Term' : /,*,+,-,<,<=,>=,>,==,!=,&&,||,),;,]
Decls' : if,id,while,do,return,break,{,}
Type' : id
Loc' : =,/,*,+,-,<,<=,>=,>,==,!=,&&,||,),;,]
Bool' : ),;,]
Join' : ||,),;,]
Equality'' : &&,||,),;,]
Expr'' : <,<=,>=,>,==,!=,&&,||,),;,]
Term'' : +,-,<,<=,>=,>,==,!=,&&,||,),;,]
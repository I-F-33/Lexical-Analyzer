Grammar:

<program>         → basic main() <block>

<block>           → { <decls_stmts> }

<decls_stmts>     → <decl> <decls_stmts> 
                  | <stmt> <decls_stmts> 
                  | ε

<decl>            → <type> id <array_decl> <init> ;

<array_decl>      → [ <expr> ] 
                  | ε

<init>            → = <initializer> 
                  | ε

<initializer>     → { <expr_list> } 
                  | <expr>

<expr_list>       → <expr> <expr_list_prime>

<expr_list_prime> → , <expr> <expr_list_prime> 
                  | ε

<type>            → num <type_prime> 
                  | real <type_prime> 
                  | basic <type_prime>

<type_prime>      → [ num ] <type_prime> 
                  | ε

<stmt>            → <if_stmt> 
                  | while ( <bool> ) <stmt> 
                  | for ( <for_init> ; <bool> ; <for_update> ) <stmt> 
                  | do <stmt> while ( <bool> ) ; 
                  | break ; 
                  | continue ; 
                  | return num ; 
                  | <block> 
                  | <loc> = <bool> ;

<if_stmt>         → if ( <bool> ) <matched_stmt> 
                  | if ( <bool> ) <unmatched_stmt>

<matched_stmt>    → <stmt> else <stmt>

<unmatched_stmt>  → <stmt>

<for_init>        → <decl> 
                  | <loc> = <expr> 
                  | ε

<for_update>      → <loc> = <expr> 
                  | <increment> 
                  | <decrement> 
                  | ε

<loc>             → id <loc_prime>

<loc_prime>       → [ <bool> ] <loc_prime> 
                  | ε

<bool>            → <join> <bool_prime>

<bool_prime>      → || <join> <bool_prime> 
                  | ε

<join>            → <equality> <join_prime>

<join_prime>      → && <equality> <join_prime> 
                  | ε

<equality>        → <rel> <equality_prime>

<equality_prime>  → == <rel> <equality_prime> 
                  | != <rel> <equality_prime> 
                  | ε

<rel>             → <expr> <rel_prime>

<rel_prime>       → < <expr> 
                  | <= <expr> 
                  | >= <expr> 
                  | > <expr> 
                  | ε

<expr>            → <term> <expr_prime>

<expr_prime>      → + <term> <expr_prime> 
                  | - <term> <expr_prime> 
                  | ε

<term>            → <unary> <term_prime>

<term_prime>      → * <unary> <term_prime> 
                  | / <unary> <term_prime> 
                  | ε

<unary>           → ! <unary> 
                  | - <unary> 
                  | <factor> 
                  | <increment> 
                  | <decrement>

<factor>          → ( <bool> ) 
                  | <loc> 
                  | num 
                  | real 
                  | true 
                  | false

<increment>       → <loc> ++ 
                  | ++ <loc>

<decrement>       → <loc> -- 
                  | -- <loc>


FIRST Sets

FIRST(<program>) = {basic}
FIRST(<block>) = {'{'}
FIRST(<decls_stmts>) = {basic, real, num, if, while, for, do, break, continue, return, '{', id, ε}
FIRST(<decl>) = {basic, real, num}
FIRST(<array_decl>) = {'[', ε}
FIRST(<init>) = {'=', ε}
FIRST(<initializer>) = {'{', num, real, true, false, id, '('}
FIRST(<expr_list>) = {num, real, true, false, id, '('}
FIRST(<expr_list_prime>) = {',', ε}
FIRST(<type>) = {num, real, basic}
FIRST(<type_prime>) = {'[', ε}
FIRST(<stmt>) = {if, while, for, do, break, continue, return, '{', id}
FIRST(<if_stmt>) = {if}
FIRST(<matched_stmt>) = {if, while, for, do, break, continue, return, '{', id}
FIRST(<unmatched_stmt>) = {if, while, for, do, break, continue, return, '{', id}
FIRST(<for_init>) = {basic, real, num, id, ε}
FIRST(<for_update>) = {id, ++, --, ε}
FIRST(<loc>) = {id}
FIRST(<loc_prime>) = {'[', ε}
FIRST(<bool>) = {num, real, true, false, id, '(', '!', '-'}
FIRST(<bool_prime>) = {||, ε}
FIRST(<join>) = {num, real, true, false, id, '(', '!', '-'}
FIRST(<join_prime>) = {&&, ε}
FIRST(<equality>) = {num, real, true, false, id, '(', '!', '-'}
FIRST(<equality_prime>) = {==, !=, ε}
FIRST(<rel>) = {num, real, true, false, id, '(', '!', '-'}
FIRST(<rel_prime>) = {'<', '<=', '>=', '>', ε}
FIRST(<expr>) = {num, real, true, false, id, '(', '!', '-'}
FIRST(<expr_prime>) = {'+', '-', ε}
FIRST(<term>) = {num, real, true, false, id, '(', '!', '-'}
FIRST(<term_prime>) = {'*', '/', ε}
FIRST(<unary>) = {'!', '-', num, real, true, false, id, '(', ++, --}
FIRST(<factor>) = {'(', id, num, real, true, false}
FIRST(<increment>) = {id, ++}
FIRST(<decrement>) = {id, --}


FOLLOW Sets

FOLLOW(<program>) = {$}
FOLLOW(<block>) = {$, else}
FOLLOW(<decls_stmts>) = {'}'}
FOLLOW(<decl>) = {basic, real, num, if, while, for, do, break, continue, return, '{', id, '}'}
FOLLOW(<array_decl>) = {'=', ';'}
FOLLOW(<init>) = {';'}
FOLLOW(<initializer>) = {';'}
FOLLOW(<expr_list>) = {'}'}
FOLLOW(<expr_list_prime>) = {'}'}
FOLLOW(<type>) = {id}
FOLLOW(<type_prime>) = {id}
FOLLOW(<stmt>) = {else, basic, real, num, if, while, for, do, break, continue, return, '{', id, '}'}
FOLLOW(<if_stmt>) = {basic, real, num, if, while, for, do, break, continue, return, '{', id, '}', else}
FOLLOW(<matched_stmt>) = {basic, real, num, if, while, for, do, break, continue, return, '{', id, '}', else}
FOLLOW(<unmatched_stmt>) = {basic, real, num, if, while, for, do, break, continue, return, '{', id, '}', else}
FOLLOW(<for_init>) = {';'}
FOLLOW(<for_update>) = {')'}
FOLLOW(<loc>) = {'++', '--', '=', '==', '!=', '<', '>', '<=', '>=', '+', '-', '*', '/', ']', ';', ')', ','}
FOLLOW(<loc_prime>) = {'++', '--', '=', '==', '!=', '<', '>', '<=', '>=', '+', '-', '*', '/', ']', ';', ')', ','}
FOLLOW(<bool>) = {')', ']', ';', ','}
FOLLOW(<bool_prime>) = {')', ']', ';', ','}
FOLLOW(<join>) = {||, ')', ']', ';', ','}
FOLLOW(<join_prime>) = {')', ']', ';', ','}
FOLLOW(<equality>) = {&&, '||', ')', ']', ';', ','}
FOLLOW(<equality_prime>) = {&&, '||', ')', ']', ';', ','}
FOLLOW(<rel>) = {==, !=, &&, '||', ')', ']', ';', ','}
FOLLOW(<rel_prime>) = {==, !=, &&, '||', ')', ']', ';', ','}
FOLLOW(<expr>) = {'<', '>', '<=', '>=', '==', '!=', &&, '||', ')', ']', ';', ','}
FOLLOW(<expr_prime>) = {'<', '>', '<=', '>=', '==', '!=', &&, '||', ')', ']', ';', ','}
FOLLOW(<term>) = {'+', '-', '<', '>', '<=', '>=', '==', '!=', &&, '||', ')', ']', ';', ','}
FOLLOW(<term_prime>) = {'+', '-', '<', '>', '<=', '>=', '==', '!=', &&, '||', ')', ']', ';', ','}
FOLLOW(<unary>) = {'*', '/', '+', '-', '<', '>', '<=', '>=', '==', '!=', &&, '||', ')', ']', ';', ','}
FOLLOW(<factor>) = {'*', '/', '+', '-', '<', '>', '<=', '>=', '==', '!=', &&, '||', ')', ']', ';', ','}
FOLLOW(<increment>) = {'*', '/', '+', '-', '<', '>', '<=', '>=', '==', '!=', &&, '||', ')', ']', ';', ','}
FOLLOW(<decrement>) = {'*', '/', '+', '-', '<', '>', '<=', '>=', '==', '!=', &&, '||', ')', ']', ';', ','}
